# I have made a temp folder which will be ignored by git so to add to folder to my repository I have made a empty file .gitkeep inside temp folder which forces git to keep track of temp folder also.

# I have installed nodemon here but as dev dependency. So dev dependency means that the package is only used through thr development process, we do not take it to production.
If we use command 'npm install --save-dev nodemon' or 'npm install -D nodemon' it will installed as dev dependency otherwise using normal command it will installed as main dependency.

# I have also installed prettier package which is used to maintain the standard followed by organization to reduce conflicting code.
To make this package work we make a file '.prettierrc' where we store our standards. 
Reload the project after making this file.
I have also made a file '.prettierignore' in which i have defined the files which i don't want it to alter. They should be as they are written.


/******DATABASE*****/
1) Connecting to database can generate error sometime. So, best approach is to wrap connection in "try-catch" or "use promises".
2) "Database is kept in another continent". So connecting to it is a time consuming process so it is always advised to use "async-await".


/*****DOT ENV*****/
The problem with dotenv file is just it's importing style. It uses that 'require' syntax which alters code consistency. Now to use it with 'import' statement we have to do some setting.
1) Since environment variables should be loaded as early as possible so at top of index.js we will import dotenv.
      -->  "import dotenv from 'dotenv'";
2) Now next thing to do is to configure it.
      -->  dotenv.config({path: './env'}); 
      In path property we give the path to the .env file. It is not neccessary to give path. We can directly use "dotenv.config()".
3) Since, currently this feature is experimental so we have to tell our application about it.
We can do this by going to package.json and altering script:
      --> "dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js"

/******MIDDLEWARE*****/
1) As the name suggests, middlewares are some kind of functionality which is performed on data while going from frontend to backend.

2) There can more than one middlewares in an app and the sequence in which they are implemented in app, they work in same sequence.

3) In express we have two parameters in each routing methods which are (req, res). For eg: In app.get('/route', (req, res)=> {});
So, till now we have seen only two paramters but there are four parameter (err, req, res, next).
We know first three (err, req, res). Let's see about (next).
(next): It is a flag which is just used to call next middleware. When 1st middleware has done it's working then we can use next flag to pass the data to next middleware similarly it can use it to pass to next middleware.

/*****UTILS FOLDER*****/
1) What is utility? Utility is something which is required again and again. 
2) In Utils we store all the files or methods which are required again and again in different files.
For eg: We have differnet models and each model need to talk to database and while talking to database we have to follow two things: 1st) Use promises or try-catch to handle errors.  2nd) Use async-await because databases take some time get the responses. So, we can see here we have to do same task for every model to make it talk to database, just database name and other minor things are changing. So we can create a file in utiltiy folder that can be used anywhere.


/*******HIGHER ORDER FUNCTIONS*******/
The functions which can accepts one or more functions as a paramater and returns them are called higher order functions.
Freecodecamp has good documentation about it: https://www.freecodecamp.org/news/higher-order-functions-in-javascript-explained/


/*******JWT********/
JSON web token is a bearers token means whosoever sends this token the data is then sent to them. It's like a key to lock.
1) To use jwt we need to install jwt package and import it.
2) We need to have same variables with some secret value which we keep in environment variables(.env).
3) The JWT tokens are in structure which is "Bearer <token>". "Bearer" is a prefix which every token will have.

/*****FILE UPLOADING****/
1) To store files we will use "cloudinary" free version.
2) To upload files we will use "multer".
3) The procedure we will follow to upload files is:- 
      ---> Using multer first we will save file to local storage for temporary usage.
      ---> Then we will uplaod the file to cloudinary and generate a public URL which we will save to database.
      /** This is a 2-step process and is followed in industry because if due to any reason if file upload fails then we have file in our local storage and we can re-attmept to uppload it. We don't have to ask user to again upload it. **/
       
      There is a another method in which we can use multer to directly upload file to cloudinary without storing it to local storage.


/****REMOVE FILE USING fs****/
1) In any of the file system they use a common term which is "link". It is a term used in Operating system which means relating one thing to other. If we talk particulary, then linking means creating a relation between file and OS.
2) Now to remove a file they use term "unlink" it means to delete the link between the file and OS.
3) To delete a file the method generally used is "unlink()" but this method is asynchronous. In our use case we need to remove file before proceeding to next operation. So, we will use "unlinkSync()" method.


/****ARRAY.SOME() METHOD IN JS***/
1) array.some() method iterates over the array and check for atleast one element in array to satisfy given condition. If any of the element satisfied the condition it returns "true" otherwise "false".
2) It accepts a callback which inside which the condition is written.
3) Inside in our code we have some method in this snippet: 
if(
        [fullName, email, username, password].some((field) => (
            field.trim() === ""
        ))
) { throw new ApiError(400, "All fields are required"); }
Here, inside "if" we are iterating on each element of the given array and checking that after removing all the white spaces(using trim() method) from the value of each element in array,if any element is empty then .some() will return "true" otherwise "false". If "true" is returned then controll wil jump to if block and throw an error.


/*** ACCESS TOKENS ***/
1) An accesss token is a credential used by an application to access a protected resource on behalf of user.
2) It represents the authorization granted to the application and specifies the premissions and scope of access.
3) Access tokens are short-lived and typically have an expiration time to enhance security.
4) They are used to make API requests to access user data or perform actions on behalf of the user.

/*** REFRESH TOKENS ***/
1) A refresh token is credential used to obtain a new access token when the current one expires.
2) Unlike access token, refresh tokens have a longer lifespan and are used to obtain a new access token without requiring the user to re-authenticate.
3) It adds an additional layer of security since the user's credentials are not invloved in every access token request.
